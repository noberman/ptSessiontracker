generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id        String    @id @default(cuid())
  name      String    @unique
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clients   Client[]
  sessions  Session[]
  users     User[]

  @@map("locations")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String
  role            Role      @default(TRAINER)
  locationId      String?
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  assignedClients Client[]  @relation("ClientPrimaryTrainer")
  sessions        Session[]
  location        Location? @relation(fields: [locationId], references: [id])

  @@map("users")
}

model Client {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  phone            String?
  locationId       String
  primaryTrainerId String?
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  location         Location  @relation(fields: [locationId], references: [id])
  primaryTrainer   User?     @relation("ClientPrimaryTrainer", fields: [primaryTrainerId], references: [id])
  packages         Package[]
  sessions         Session[]

  @@map("clients")
}

model Package {
  id                String    @id @default(cuid())
  clientId          String
  packageType       String    @default("Custom")
  name              String
  totalValue        Float
  totalSessions     Int
  remainingSessions Int       @default(0)
  sessionValue      Float
  startDate         DateTime?
  expiresAt         DateTime?
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  client            Client    @relation(fields: [clientId], references: [id])
  sessions          Session[]

  @@map("packages")
}

model Session {
  id               String    @id @default(cuid())
  trainerId        String
  clientId         String
  packageId        String?
  locationId       String
  sessionDate      DateTime
  sessionValue     Float
  validated        Boolean   @default(false)
  validatedAt      DateTime?
  validationToken  String?   @unique
  validationExpiry DateTime?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  client           Client    @relation(fields: [clientId], references: [id])
  location         Location  @relation(fields: [locationId], references: [id])
  package          Package?  @relation(fields: [packageId], references: [id])
  trainer          User      @relation(fields: [trainerId], references: [id])

  @@index([trainerId, sessionDate])
  @@index([validationToken])
  @@map("sessions")
}

model PackageTemplate {
  id           String   @id @default(cuid())
  name         String   @unique
  displayName  String
  category     String
  sessions     Int
  price        Float
  sessionValue Float
  active       Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
  @@index([active])
  @@map("package_templates")
}

model CommissionTier {
  id          String   @id @default(cuid())
  minSessions Int
  maxSessions Int?
  percentage  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("commission_tiers")
}

model EmailLog {
  id           String    @id @default(cuid())
  to           String
  subject      String
  template     String?
  status       String    @default("pending")
  messageId    String?
  sentAt       DateTime?
  error        String?
  metadata     Json?
  responseTime Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([messageId])
  @@map("email_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@map("audit_logs")
}

enum Role {
  TRAINER
  CLUB_MANAGER
  PT_MANAGER
  ADMIN
}
