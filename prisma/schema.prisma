generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                   String             @id @default(cuid())
  name                 String
  email                String             @unique
  phone                String?
  subscriptionTier     SubscriptionTier   @default(FREE)
  subscriptionStatus   SubscriptionStatus @default(ACTIVE)
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  // Relations
  locations            Location[]
  users                User[]
  commissionTiers      CommissionTier[]
  packageTypes         PackageType[]

  @@map("organizations")
}

enum SubscriptionTier {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

model Location {
  id             String         @id @default(cuid())
  name           String         @unique
  active         Boolean        @default(true)
  organizationId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  clients        Client[]
  sessions       Session[]
  users          User[]

  @@map("locations")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  password        String
  name            String
  role            Role           @default(TRAINER)
  locationId      String?
  organizationId  String?
  active          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  organization    Organization?  @relation(fields: [organizationId], references: [id])
  location        Location?      @relation(fields: [locationId], references: [id])
  assignedClients Client[]       @relation("ClientPrimaryTrainer")
  sessions        Session[]

  @@map("users")
}

model Client {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  phone            String?
  locationId       String
  primaryTrainerId String?
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  location         Location  @relation(fields: [locationId], references: [id])
  primaryTrainer   User?     @relation("ClientPrimaryTrainer", fields: [primaryTrainerId], references: [id])
  packages         Package[]
  sessions         Session[]

  @@map("clients")
}

model Package {
  id                String       @id @default(cuid())
  clientId          String
  packageType       String       @default("Custom") // Keeping for backward compatibility
  packageTypeId     String?      // New field for PackageType relation
  name              String
  totalValue        Float
  totalSessions     Int
  remainingSessions Int          @default(0)
  sessionValue      Float
  startDate         DateTime?
  expiresAt         DateTime?
  active            Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relations
  client            Client       @relation(fields: [clientId], references: [id])
  packageTypeModel  PackageType? @relation(fields: [packageTypeId], references: [id])
  sessions          Session[]

  @@map("packages")
}

model Session {
  id               String    @id @default(cuid())
  trainerId        String
  clientId         String
  packageId        String?
  locationId       String
  sessionDate      DateTime
  sessionValue     Float
  validated        Boolean   @default(false)
  validatedAt      DateTime?
  validationToken  String?   @unique
  validationExpiry DateTime?
  cancelled        Boolean   @default(false)
  cancelledAt      DateTime?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  client           Client    @relation(fields: [clientId], references: [id])
  location         Location  @relation(fields: [locationId], references: [id])
  package          Package?  @relation(fields: [packageId], references: [id])
  trainer          User      @relation(fields: [trainerId], references: [id])

  @@index([trainerId, sessionDate])
  @@index([validationToken])
  @@map("sessions")
}


model PackageType {
  id              String        @id @default(cuid())
  organizationId  String
  name            String        // User-friendly name like "Elite 12 Sessions"
  defaultSessions Int?          // Default session count for this type
  defaultPrice    Float?        // Default price for this type
  isActive        Boolean       @default(true)
  sortOrder       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  organization    Organization  @relation(fields: [organizationId], references: [id])
  packages        Package[]     // Packages using this type
  
  @@unique([organizationId, name])
  @@index([organizationId])
  @@map("package_types")
}

model CommissionTier {
  id             String        @id @default(cuid())
  minSessions    Int
  maxSessions    Int?
  percentage     Float
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relations
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("commission_tiers")
}

model EmailLog {
  id           String    @id @default(cuid())
  to           String
  subject      String
  template     String?
  status       String    @default("pending")
  messageId    String?
  sentAt       DateTime?
  error        String?
  metadata     Json?
  responseTime Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([messageId])
  @@map("email_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@map("audit_logs")
}

enum Role {
  TRAINER
  CLUB_MANAGER
  PT_MANAGER
  ADMIN
}
